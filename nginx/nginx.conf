################################################################################
# Filename: nginx.conf
# Purpose:  Configure Nginx as a reverse proxy for the application
# Author:   Benjamin Goh
#
# Description:
# This configuration file sets up Nginx as a reverse proxy to route traffic
# to the frontend and backend services of the application. It ensures that
# requests to the root URL are forwarded to the frontend service running on
# port 3000, and API requests under '/api' are directed to the backend service
# on port 5000. This setup is commonly used in microservices architectures to
# decouple client-side and server-side components.
#
# Usage:
# Place this file in the Nginx configuration directory, typically `/etc/nginx/conf.d/`
# on most Linux distributions. You may need to adjust the file's location and name
# depending on your Nginx installation and operating environment.
#
# To apply changes made to this configuration, restart Nginx using:
#   sudo systemctl restart nginx
# Or, for systems without systemctl:
#   sudo service nginx restart
#
# Notes:
# - Ensure that the DNS or hosts file is configured so that 'frontend' and 'backend'
#   resolve to the correct IP addresses within your network or local machine.
# - The `listen 80;` directive configures Nginx to listen on port 80, which is the
#   standard HTTP port. For HTTPS, additional configuration for SSL certificates
#   would be required.
# - This file assumes that the Nginx instance is running in an environment where
#   Docker networking or similar technology is used to resolve service names like
#   'frontend' and 'backend'.
# - Adjust logging and other server parameters as needed to match your operational
#   requirements and security policies.
#
################################################################################

events {
    # Configuration for handling connections. Adjust the worker_connections
    # according to your server's capacity and expected traffic load.
    worker_connections 1024;
}

http {
    server {
        # Listen on port 80 for incoming HTTP traffic.
        listen 80;

        # Default location block forwarding traffic to the frontend.
        location / {
            proxy_pass http://frontend:3000;  # Reverse proxy to the frontend service.
            proxy_set_header Host $host;  # Forward the host header to the frontend.
            proxy_set_header X-Real-IP $remote_addr;  # Forward the real IP of the client.
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # For handling correct IP in logs if behind another proxy.
            proxy_set_header X-Forwarded-Proto $scheme;  # Forward the protocol used by the client.
        }

        # Location block for API requests, forwarding to the backend service.
        location /api {
            proxy_pass http://backend:5000;  # Reverse proxy to the backend service.
            proxy_set_header Host $host;  # Forward the host header to the backend.
            proxy_set_header X-Real-IP $remote_addr;  # Forward the real IP of the client.
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # For correct client IP in logs.
            proxy_set_header X-Forwarded-Proto $scheme;  # Forward the protocol used.
        }
    }
}
